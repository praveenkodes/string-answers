#zig zag conversion
class Solution:
    def convert(self, s: str, r: int) -> str:
        n=len(s)
        k=0
        c=0
        mat=[[""for _ in range(n)]for _ in range(r)]
        while k<n:
            #top to bottom
            for i in range(0,r):
                if k<n:
                    mat[i][c]=s[k]
                    k+=1
            c+=1
            #bottom to diagonal top
            for i in range(r-2,0,-1):
                if k<n:
                    mat[i][c]=s[k]
                    k+=1
                    c+=1
        for i in mat:
            print(i)

#Finding valid ip Address
class Solution:
    def isValid(self, s: str) -> bool:
        parts = s.split(".")
        n = len(parts)
        if n != 4:
            return False
        for p in parts:
            if not self.isIp(p):
                return False
        return True

    def isIp(self, s: str) -> bool:
        n = len(s)
        if n == 0:
            return False
        if s[0] == '0' and n != 1:
            return False
        if not s.isdigit():
            return False
        val = int(s)
        return 0 <= val <= 255

